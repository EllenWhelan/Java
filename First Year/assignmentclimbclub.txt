A climbing club has a collection of climbing harnesses, each of which can be loaned to members of the club for use on a climbing wall. Each climbing harness has the following characteristics: make (e.g. PETZL), model number (e.g. 4576), number of times used value (e.g. 0), name of the club climbing instructor who last checked the safety of the harness (e.g. John Simpson), whether or not the harness is currently on loan to climbing club member (e.g. true), and the name of the club member who borrowed the harness if it is on loan (e.g. Jennifer Maguire). The climbing club only purchases new harnesses, i.e., new harnesses have never been used before. Additionally, a club climbing instructor always double checks the safety of each new harness.


A climbing club member can borrow a harness to use if one is available. Each time a harness is used, its number of times used value is incremented by one. If a harness have been used 25 times (or more) it cannot be borrowed again by a member of the club until it is physically checked for safety by a climbing instructor. Once a climbing instructor checks the safety of a harness its number of times used value is reset to zero and the name of the climbing instructor who checked the harness for safety is also recorded. If the climbing instructor finds that the harness is not safe for use by club members then the harness is removed from the club.


Design a Harness data type (Java class) whose values (Java objects) represent climbing club harnesses. Your data type must store the above harness characteristics and must provide at least the following operations (Java instance methods):

(1) a constructor which takes the make, the model number, the number of times the harness was used, the name of the climbing instructor who last checked the safety of the harness, whether the harness is on loan, and if the harness is on loan the name of club member who has it borrowed. The constructor creates a Harness value with the given characteristics.

(2) a constructor which takes the make, the model number, and the name of the climbing instructor who checked the safety of the harness, and which creates a Harness value with the given characteristics and the other characteristics to sensible initial values.  

(3) checkHarness which takes the name of a climbing instructor and which resets the number of times used value of this harness and records the name of the safety checking instructor, assuming that this harness is not currently on out on loan, otherwise this operation has no effect.

(4) isHarnessOnLoan which determines whether this harness is currently loaned out to a climbing club member.

(5) canHarnessBeLoaned which determines whether this harness can be loaned out to a climbing club member.

(6) loanHarness which takes the name of a climbing club member and which loans this harness to the club member, assuming that this harness can be loaned, otherwise the operation has no effect.  

(7) returnHarness which updates this harness characteristics to record the fact that the harness has been returned by a climbing club member, assuming that the harness was on loan. If the harness was not on loan the operation has no effect.

(8) toString which return a String value description of this harness.


Design a HarnessRecords data type (Java class) whose values (Java objects) represent the collection of harnesses owned by climbing club, that is, the current characteristics of each harness owned by a climbing club. Your data type must store a list of Harness values (using either an array or an ArrayList) and must provide at least the following operations (Java instance methods):

(1) a constructor which constructs an empty HarnessRecords value, that is, a HarnessRecords value which does not contain any Harness values.

(2) a constructor which takes an input stream containing the number of harness contained in the stream follow by characteristics values for each harness. The constructor creates a HarnessRecords value containing a Harness value for each one in the input stream.

(3) isEmpty which determiners whether this collection of harness records is empty,  that is, does not contain any Harness values.

(4) addHarness which takes a Harness value to add to the list of currently of currently recorded climbing club harnesses.

(5) findHarness which takes a harness make and model number, and which finds and returns the harness with given make and model number, assuming that such a harness exists in list of currently recorded climbing club harnesses, otherwise the operation returns the null value.

(6) checkHarness which takes an instructor name, a harness make and model number, and which updates the characteristics of this particular harness to reflect the fact that the given instructor has safety checked the harness, assuming the harness exists and is currently not on loan. If a harness is updated it is returned by the operation, otherwise the operation has no effect and      returns the null value.

(7) loanHarness which takes the name of a climbing club member and which tries to find an available harness for them to use. If a usable harness is found its characteristics are updated and the harness is returned, otherwise the operation has no effect and returns the null value.

(8) returnHarness which takes the make and model number of a harness, which should be currently on loan to a club member, and which finds and updates the  characteristics of that particular harness, assuming that such a harness exists. If a harness is found and updated it is returned by the operation,  otherwise the operation has no effect and returns the null value.

(9) removeHarness which takes the make and model number of a harness, and which finds and removes the harness from the list of currently recorded climbing club harnesses, assuming that such a harness exists. If a harness is found and removed it is returned by the operation, otherwise the operation has no effect and returns the null value.


Write a Java program which will allow a user (the climbing club manager) to keep track of and update the current characteristics of each climbing club harness through a user interface (text based or otherwise). The user interface must at least allow the climbing club manager to:

(1) add a record for a newly purchased harness,

(2) remove a climbing harness from the club,

(3) record the fact that a club instructor has checked the safety of a harness,

(4) loan a harness to a club member if there is an availabe harness,  

5) return a harness which is no longer in use by a club member.

Just before you submit your program you need to do a self-assessment exercise to evaluate how well you did...
Copy the multi-line comment below and put it at the top of your program. Put in a mark and a comment (explaining what you did) for each criterion (even if you have given yourself full marks, otherwise one mark will be deducted per criterion that is missing this information).
/* SELF ASSESSMENT

Harness Class: Member variables (8 marks)
All my data members are declared, private and the ones that don't change are marked as private. I also have a constant for the maximum number of uses of a harness.
Comment:

Harness Class: Harness constructor 1 & constructor 2 (6 marks)
I initialise all the variables using the parameters given and set the other members to reasonable default values.
Comment:

Harness Class: checkHarness method (5 marks)
My method takes an instructor's name as a parameter, and if the harness is not on loan sets the instructor member variable to the given parameter value (assuming the instructor's name is not null/empty). It also resets the number of times the harness was used.
Comment:

Harness Class: isHarnessOnLoan method (2 marks)
My method has no parameters and returns the value of the loan status variable.
Comment:

Harness Class: canHarnessBeLoaned method (4 marks)
My method has no parameters and returns true if the harness is not on loan and if the number of times it was used is less than the maximum allowed number of times.
Comment:

Harness Class: loanHarness method (6 marks)
My method has a member name as a parameter and it checks if harness can be loaned by using the canHarnessBeLoaned method. If true, it sets the club member value to the parameter value, sets the on loan status to true and increments the number of times used variable.
Comment:
 
Harness Class: returnHarness method (5 marks)
My method has no parameters, checks if the harness is on loan, and if so, changes its on-loan status to false, and resets the club member value.
Comment:

Harness Class: toString method (3 marks)
My method returns a String representation of all the member variables.
Comment:

HarnessRecords Class: member variables (3 marks)
I declare the member variable as a private collection of Harnesses 
Comment:

HarnessRecords Class: HarnessRecords constructor 1 & 2 (9 marks)
In the first constructor, I set the member variable to null [1 mark]. In the second constructor, I use the Java I/O to read data from a text file I created containing sets of Harness characteristics. I use these set of characteristics to create Harness objects and add them to the collection. 
Comment:

HarnessRecords Class: isEmpty method (1 marks)
I return true if the collection is null/empty and, false otherwise.
Comment:

HarnessRecords Class: addHarness method (5 marks)
My method takes a Harness object as a parameter and adds the harness to the collection.
Comment:

HarnessRecords Class: findHarness method (6 marks)
My method takes a make and model number as parameters. It checks if a harness with such properties exists and if it does it returns harness object, otherwise returns null.
Comment:

HarnessRecords Class: checkHarness method (6 marks)
must take instructor name, make and model number as parameters and return a Harness. If a harness with the make and model number exists by using the findHarness method and is not on loan, the Harness method checkHarness is called with the instructor name as a parameter and the updated Harness object is returned. If the harness is not available returns null.
Comment:

HarnessRecords Class: loanHarness method (7 marks)
My method takes a club member name as a parameter and looks for an available harness by calling the method canHarnessBeLoaned be loaned. If an available harness is found it is loaned by using the Harness method loanHarness with the club member as a parameter, returning the harness. If there's no available harness null is returned.
Comment:

HarnessRecords Class: returnHarness method (7 marks)
My method takes a make and model number as parameters. It checks if a harness with those properties exists by using the findHarness method. If the found harness is not null, it returns the harness object by using Harness method returnHarness, otherwise returns null.
Comment:

HarnessRecords Class: removeHarness method (8 marks)
My method takes a make and model number as parameters and check the collection for a harness with those properties and removes it. It returns the harness object if it is found, otherwise returns null.
Comment:

GUI (Java main line) (5 marks)
My test class has a menu which implements at least the five points specified using the HarnessRecords class methods.
Comment: 
*/